{"ast":null,"code":"const mailGenerator = require('../mail/mail');\n\n/**\n * Connection\n * client connection that handles io\n *\n * @class Connection\n */\nclass Connection {\n  constructor(socket) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.socket = socket;\n    this.logger = options.logger;\n    this.schema = options.schema;\n    this.parser = options.parser;\n    this.data = false;\n    this.done = false;\n    this.mail = mailGenerator();\n    this.send = message => {\n      this.socket.write(message);\n    };\n    this.schema.connect(this.socket);\n    this.send('220 localhost Simple Mail Transfer Service Ready\\r\\n');\n    this.socket.on('data', this.onData.bind(this));\n    this.socket.on('close', () => {\n      this.socket.destroy();\n    });\n  }\n  onData(buffer) {\n    const line = buffer.toString();\n    this.parse(line);\n  }\n  parse() {\n    let line = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    const {\n      action,\n      params\n    } = this.parser(line);\n    return this.run(line, action, params);\n  }\n  runData(line) {\n    if (line === '\\r\\n.\\r\\n' || line === '.\\r\\n') {\n      this.data = false;\n      return this.done = true;\n    }\n    return this.mail.addMessage(line);\n  }\n  async run(line, action, params) {\n    if (this.schema[action]) {\n      await this.schema[action]({\n        action,\n        params\n      });\n    }\n    if (action === 'EHLO') {\n      return this.send('250 smtp.example.com, Hi! you sent me a EHLO\\r\\n');\n    }\n    if (action === 'HELO') {\n      return this.send('250 smtp.example.com, I am glad to meet you\\r\\n');\n    }\n    if (action === 'MAIL FROM') {\n      this.mail.setFromSender(params);\n      return this.send('250 Ok\\r\\n');\n    }\n    if (action === 'RCPT TO') {\n      this.mail.addRecipient(params);\n      return this.send('250 Ok\\r\\n');\n    }\n    if (action === 'DATA') {\n      // new thing we have to run\n      this.data = true;\n      return this.send('354 End data with <CR><LF>.<CR><LF>\\r\\n');\n    }\n    if (action === 'QUIT') {\n      return this.send('221 Bye\\r\\n');\n      // close connection\n    }\n\n    if (this.data) {\n      this.runData(line);\n      if (this.done) {\n        return this.send('250 Ok: queued as 12345\\r\\n');\n      }\n    }\n    if (action === 'VRFY') {\n      return this.send('252 The recipient cannot be verified\\r\\n');\n    }\n  }\n  getMail() {\n    return this.mail.getMail();\n  }\n}\nmodule.exports = Connection;","map":{"version":3,"names":["mailGenerator","require","Connection","constructor","socket","options","arguments","length","undefined","logger","schema","parser","data","done","mail","send","message","write","connect","on","onData","bind","destroy","buffer","line","toString","parse","action","params","run","runData","addMessage","setFromSender","addRecipient","getMail","module","exports"],"sources":["C:/Users/Spyder/Desktop/SP/screenplay/node_modules/smtpjs/src/smtp/connection/Connection.js"],"sourcesContent":["const mailGenerator = require('../mail/mail')\n\n/**\n * Connection\n * client connection that handles io\n *\n * @class Connection\n */\nclass Connection {\n  constructor (socket, options = {}) {\n    this.socket = socket\n    this.logger = options.logger\n    this.schema = options.schema\n    this.parser = options.parser\n    this.data = false\n    this.done = false\n    this.mail = mailGenerator()\n    this.send = (message) => {\n      this.socket.write(message)\n    }\n\n    this.schema.connect(this.socket)\n    this.send('220 localhost Simple Mail Transfer Service Ready\\r\\n')\n\n    this.socket.on('data', this.onData.bind(this))\n    this.socket.on('close', () => {\n      this.socket.destroy()\n    })\n  }\n\n  onData (buffer) {\n    const line = buffer.toString()\n\n    this.parse(line)\n  }\n\n  parse (line = '') {\n    const { action, params } =  this.parser(line)\n\n    return this.run(line, action, params)\n  }\n\n  runData (line) {\n    if (line === '\\r\\n.\\r\\n' || line === '.\\r\\n') {\n      this.data = false\n\n      return this.done = true\n    }\n\n    return this.mail.addMessage(line)\n  }\n\n  async run (line, action, params) {\n    if (this.schema[action]) {\n      await this.schema[action]({\n        action,\n        params,\n      })\n    }\n\n    if (action === 'EHLO') {\n      return this.send('250 smtp.example.com, Hi! you sent me a EHLO\\r\\n')\n    }\n\n    if (action === 'HELO') {\n      return this.send('250 smtp.example.com, I am glad to meet you\\r\\n')\n    }\n\n    if (action === 'MAIL FROM') {\n      this.mail.setFromSender(params)\n      return this.send('250 Ok\\r\\n')\n    }\n\n    if (action === 'RCPT TO') {\n      this.mail.addRecipient(params)\n      return this.send('250 Ok\\r\\n')\n    }\n\n    if (action === 'DATA') {\n      // new thing we have to run\n      this.data = true\n      return this.send('354 End data with <CR><LF>.<CR><LF>\\r\\n')\n    }\n\n    if (action === 'QUIT') {\n      return this.send('221 Bye\\r\\n')\n      // close connection\n    }\n\n    if (this.data) {\n      this.runData(line)\n\n      if (this.done) {\n        return this.send('250 Ok: queued as 12345\\r\\n')\n      }\n    }\n\n    if (action === 'VRFY') {\n      return this.send('252 The recipient cannot be verified\\r\\n')\n    }\n  }\n\n  getMail () {\n    return this.mail.getMail()\n  }\n}\n\nmodule.exports = Connection"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}